#!/bin/bash

# IP Rotator - Passwordless Sudo Setup
# This script configures passwordless sudo for VPN operations to enable
# clean shutdown without password prompts

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

SUDOERS_FILE="/etc/sudoers.d/ip-rotator"

print_banner() {
    echo -e "${BLUE}"
    echo "=================================================================="
    echo "            IP ROTATOR - PASSWORDLESS SUDO SETUP"
    echo "=================================================================="
    echo -e "${NC}"
}

show_help() {
    print_banner
    echo -e "${GREEN}This script configures passwordless sudo for IP Rotator VPN operations.${NC}"
    echo ""
    echo -e "${YELLOW}What this does:${NC}"
    echo "• Allows your user to run VPN cleanup commands without password prompts"
    echo "• Enables clean shutdown with Ctrl+C"
    echo "• Maintains security by only allowing specific commands"
    echo ""
    echo -e "${YELLOW}Commands that will be passwordless:${NC}"
    echo "• sudo pkill -f openvpn"
    echo "• sudo systemctl restart systemd-resolved"
    echo ""
    echo -e "${YELLOW}Usage:${NC}"
    echo "  $0 [options]"
    echo ""
    echo -e "${YELLOW}Options:${NC}"
    echo "  --install     Install passwordless sudo configuration"
    echo "  --uninstall   Remove passwordless sudo configuration"
    echo "  --status      Check current configuration status"
    echo "  --help        Show this help message"
    echo ""
    echo -e "${RED}⚠️  Security Note:${NC}"
    echo "This configuration only allows specific VPN-related commands without password."
    echo "All other sudo operations will still require a password."
}

check_status() {
    echo -e "${BLUE}Checking passwordless sudo status...${NC}"
    echo ""
    
    if [ -f "$SUDOERS_FILE" ]; then
        echo -e "${GREEN}✓ Passwordless sudo is configured${NC}"
        echo "Configuration file: $SUDOERS_FILE"
        echo ""
        echo "Current configuration:"
        cat "$SUDOERS_FILE" | grep -v "^#" | grep -v "^$"
        
        # Test if it works
        echo ""
        echo "Testing passwordless sudo..."
        if sudo -n true 2>/dev/null; then
            echo -e "${GREEN}✓ Passwordless sudo test successful${NC}"
        else
            echo -e "${YELLOW}⚠️  Note: General passwordless sudo not configured (this is normal)${NC}"
            echo "VPN-specific commands should still work without password during shutdown."
        fi
    else
        echo -e "${YELLOW}⚠️  Passwordless sudo is not configured${NC}"
        echo "Run with --install to set it up"
    fi
}

install_config() {
    print_banner
    echo -e "${GREEN}Installing passwordless sudo configuration for IP Rotator...${NC}"
    echo ""
    
    # Check if already installed
    if [ -f "$SUDOERS_FILE" ]; then
        echo -e "${YELLOW}Configuration already exists.${NC}"
        read -p "Do you want to overwrite it? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Installation cancelled."
            exit 0
        fi
    fi
    
    # Get current user
    CURRENT_USER=$(whoami)
    
    echo "Creating sudoers configuration for user: $CURRENT_USER"
    
    # Create the sudoers configuration
    SUDOERS_CONTENT="# IP Rotator - Passwordless sudo configuration
# Generated by setup-passwordless-sudo.sh
# This allows specific VPN operations without password prompts

# Allow user to kill OpenVPN processes without password
$CURRENT_USER ALL=(ALL) NOPASSWD: /usr/bin/pkill -f openvpn, /bin/pkill -f openvpn

# Allow user to restart systemd-resolved for DNS cleanup without password
$CURRENT_USER ALL=(ALL) NOPASSWD: /usr/bin/systemctl restart systemd-resolved, /bin/systemctl restart systemd-resolved

# Allow user to run OpenVPN with specific parameters (for VPN connection)
$CURRENT_USER ALL=(ALL) NOPASSWD: /usr/sbin/openvpn --config *, /usr/bin/openvpn --config *"
    
    # Write to temporary file first for validation
    TEMP_FILE=$(mktemp)
    echo "$SUDOERS_CONTENT" > "$TEMP_FILE"
    
    # Validate sudoers syntax
    if ! sudo visudo -cf "$TEMP_FILE"; then
        echo -e "${RED}❌ Error: Invalid sudoers configuration generated${NC}"
        rm "$TEMP_FILE"
        exit 1
    fi
    
    # Install the configuration
    sudo cp "$TEMP_FILE" "$SUDOERS_FILE"
    sudo chmod 440 "$SUDOERS_FILE"
    rm "$TEMP_FILE"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Passwordless sudo configuration installed successfully!${NC}"
        echo ""
        echo -e "${YELLOW}What's configured:${NC}"
        echo "• VPN cleanup commands (pkill openvpn)"
        echo "• DNS reset commands (systemctl restart systemd-resolved)"
        echo "• OpenVPN connection commands"
        echo ""
        echo -e "${GREEN}You can now use IP Rotator with clean Ctrl+C shutdown!${NC}"
    else
        echo -e "${RED}❌ Error installing configuration${NC}"
        exit 1
    fi
}

uninstall_config() {
    print_banner
    echo -e "${YELLOW}Removing passwordless sudo configuration...${NC}"
    echo ""
    
    if [ ! -f "$SUDOERS_FILE" ]; then
        echo -e "${YELLOW}No configuration found to remove.${NC}"
        exit 0
    fi
    
    echo "This will remove the passwordless sudo configuration for IP Rotator."
    read -p "Are you sure? (y/N): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Uninstall cancelled."
        exit 0
    fi
    
    sudo rm "$SUDOERS_FILE"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Passwordless sudo configuration removed${NC}"
        echo "IP Rotator will now prompt for password during VPN operations."
    else
        echo -e "${RED}❌ Error removing configuration${NC}"
        exit 1
    fi
}

# Main logic
case "${1:-}" in
    --install)
        install_config
        ;;
    --uninstall)
        uninstall_config
        ;;
    --status)
        check_status
        ;;
    --help)
        show_help
        ;;
    "")
        show_help
        ;;
    *)
        echo -e "${RED}Error: Unknown option $1${NC}"
        echo "Use --help for usage information."
        exit 1
        ;;
esac