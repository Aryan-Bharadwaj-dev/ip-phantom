#!/bin/bash

# IP Phantom - Anonymous IP Address Changing Tool
# Bash wrapper script for the Python IP Phantom
# For educational and legitimate security testing purposes only

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Determine if we're running from global installation or local directory
if [[ "$SCRIPT_DIR" == "/usr/local/bin" ]] || [[ "$SCRIPT_DIR" == "/usr/bin" ]]; then
    # Global installation - find the actual script directory
    REAL_SCRIPT="$(readlink "${BASH_SOURCE[0]}")"
    SCRIPT_DIR="$(cd "$(dirname "$REAL_SCRIPT")" && pwd)"
fi

PYTHON_SCRIPT="$SCRIPT_DIR/ip_phantom.py"
DEFAULT_INTERVAL=3
DEFAULT_CONFIG="$SCRIPT_DIR/config.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Banner
print_banner() {
    echo -e "${PURPLE}"
    echo "=================================================================="
    echo "    ██╗██████╗      ██████╗ ██╗  ██╗ █████╗ ███╗   ██╗████████╗ ██████╗ ███╗   ███╗"
    echo "    ██║██╔══██╗     ██╔══██╗██║  ██║██╔══██╗████╗  ██║╚══██╔══╝██╔═══██╗████╗ ████║"
    echo "    ██║██████╔╝     ██████╔╝███████║███████║██╔██╗ ██║   ██║   ██║   ██║██╔████╔██║"
    echo "    ██║██╔═══╝      ██╔═══╝ ██╔══██║██╔══██║██║╚██╗██║   ██║   ██║   ██║██║╚██╔╝██║"
    echo "    ██║██║          ██║     ██║  ██║██║  ██║██║ ╚████║   ██║   ╚██████╔╝██║ ╚═╝ ██║"
    echo "    ╚═╝╚═╝          ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝    ╚═════╝ ╚═╝     ╚═╝"
    echo ""
    echo "                    👻 Anonymous IP Address Changing Tool"
    echo "                    🌐 Vanish & Reappear with New Identity"
    echo "=================================================================="
    echo -e "${NC}"
}

# Help function
show_help() {
    # Detect if running from global installation or local
    # Check how this script was actually called
    SCRIPT_NAME="$(basename "$0")"
    if [[ "$SCRIPT_NAME" == "ip-phantom" ]] && [[ "$0" != "./ip-phantom" ]]; then
        COMMAND="ip-phantom"
        INSTALL_STATUS="🌍 Global Installation"
    else
        COMMAND="./ip-phantom"
        INSTALL_STATUS="📁 Local Installation"
    fi
    
    echo -e "${PURPLE}"
    echo "=================================================================="
    echo "                    👻 IP PHANTOM HELP GUIDE"
    echo "=================================================================="
    echo -e "${NC}"
    echo -e "${GREEN}IP Phantom - Professional Anonymous IP Changing Tool${NC}"
    echo -e "${BLUE}$INSTALL_STATUS${NC}"
    echo ""
    echo -e "${YELLOW}📋 USAGE:${NC}"
    echo "  $COMMAND [OPTIONS]"
    echo ""
    echo -e "${YELLOW}⚙️  CORE OPTIONS:${NC}"
    echo "  -i, --interval SECONDS    ⏱️  Time interval between IP changes (default: 3)"
    echo "  -c, --config FILE         📁 Configuration file path (default: config.json)"
    echo "  -v, --verbose             📊 Enable verbose logging output"
    echo "  -h, --help               ❓ Show this comprehensive help message"
    echo ""
    echo -e "${YELLOW}🔧 UTILITY COMMANDS:${NC}"
    echo "  --check-ip               📍 Check current IP address and exit"
    echo "  --demo                   🎯 Run in demo mode (simulated IP changes)"
    echo "  --tor                    🌐 Use Tor network for real IP changes (FREE!)"
    echo ""
    echo -e "${YELLOW}✨ QUICK START EXAMPLES:${NC}"
    echo -e "  ${GREEN}# 🆓 FREE Real IP Changes with Tor!${NC}"
    echo "  $COMMAND --interval 5"
    echo ""
    echo -e "  ${GREEN}# 🎯 Demo Mode - Perfect for presentations!${NC}"
    echo "  $COMMAND --demo --interval 3"
    echo ""
    echo -e "  ${GREEN}# 🚀 Basic Operations${NC}"
    echo "  $COMMAND --check-ip              # Check current IP"
    echo "  $COMMAND --tor --interval 10     # Real IP changes via Tor"
    echo ""
    echo -e "${YELLOW}🎯 DEMO MODE vs REAL MODE:${NC}"
    echo -e "  ${GREEN}Demo Mode:${NC}"
    echo "  ✅ Zero dependencies - no setup required"
    echo "  ✅ Perfect for cybersecurity demonstrations"
    echo "  ✅ Safe simulated IP changes"
    echo "  ✅ Professional visual output"
    echo ""
    echo -e "  ${GREEN}Real Mode (Tor):${NC}"
    echo "  ✅ 100% FREE - no VPN subscriptions"
    echo "  ✅ Actually changes your IP address"
    echo "  ✅ Anonymous browsing through Tor"
    echo "  ✅ Real cybersecurity protection"
    echo ""
    echo -e "${YELLOW}📋 SYSTEM REQUIREMENTS:${NC}"
    echo -e "  ${GREEN}For Demo Mode:${NC}"
    echo "  - Python 3.6+ 🐍"
    echo "  - curl (for IP checking) 🌐"
    echo ""
    echo -e "  ${GREEN}For Real Mode (Tor):${NC}"
    echo "  - All demo requirements plus:"
    echo "  - Tor network client 🔒"
    echo "  - Internet connection 📡"
    echo ""
    if [[ "$COMMAND" == "./ip-phantom" ]]; then
        echo -e "${YELLOW}🚀 INSTALLATION TIP:${NC}"
        echo -e "  ${GREEN}Make globally available (run once):${NC}"
        echo "  ./install.sh"
        echo "  # Then use: ip-phantom --tor (from anywhere!)"
    else
        echo -e "${YELLOW}🎉 GLOBAL INSTALLATION ACTIVE:${NC}"
        echo -e "  ${GREEN}You're using the global installation! Benefits:${NC}"
        echo "  ✅ Run from any directory"
        echo "  ✅ No need for ./"
        echo "  ✅ Professional workflow"
    fi
    echo ""
    echo -e "${YELLOW}🔍 TROUBLESHOOTING:${NC}"
    echo -e "  ${GREEN}Test basic functionality:${NC}"
    echo "  $COMMAND --demo --check-ip       # Test without dependencies"
    echo "  $COMMAND --demo --verbose        # Debug with details"
    echo ""
    echo -e "  ${GREEN}Permission issues:${NC}"
    if [[ "$COMMAND" == "./ip-phantom" ]]; then
        echo "  chmod +x ip-phantom ip_phantom.py   # Fix permissions"
    else
        echo "  cd \$(readlink \$(which ip-phantom) | xargs dirname)  # Go to source"
        echo "  chmod +x ip-phantom ip_phantom.py   # Fix permissions"
    fi
    echo ""
    echo -e "${RED}⚠️  LEGAL DISCLAIMER:${NC}"
    echo -e "This tool is for ${YELLOW}educational and authorized security testing only${NC}."
    echo "Users are responsible for compliance with applicable laws and regulations."
    echo "Always obtain proper authorization before testing any systems."
    echo ""
    echo -e "${PURPLE}==================================================================${NC}"
}

# Check dependencies
check_dependencies() {
    local missing_deps=()
    
    # Check Python
    if ! command -v python3 &> /dev/null; then
        missing_deps+=("python3")
    fi
    
    # Check Tor (only for real mode)
    if [[ "$tor" == "true" ]] && ! command -v tor &> /dev/null; then
        echo -e "${YELLOW}Installing Tor automatically...${NC}"
        if command -v brew &> /dev/null; then
            brew install tor
        elif command -v apt &> /dev/null; then
            sudo apt update && sudo apt install tor
        elif command -v yum &> /dev/null; then
            sudo yum install tor
        else
            missing_deps+=("tor")
        fi
    fi
    
    # Check curl
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}Error: Missing required dependencies:${NC}"
        for dep in "${missing_deps[@]}"; do
            echo "  - $dep"
        done
        echo ""
        echo "Please install the missing dependencies and try again."
        exit 1
    fi
}

# Main function
main() {
    # Parse arguments
    interval="$DEFAULT_INTERVAL"
    config="$DEFAULT_CONFIG"
    verbose=""
    check_ip=""
    demo=""
    tor=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -i|--interval)
                interval="$2"
                shift 2
                ;;
            -c|--config)
                config="$2"
                shift 2
                ;;
            -v|--verbose)
                verbose="--verbose"
                shift
                ;;
            --check-ip)
                check_ip="--check-ip"
                shift
                ;;
            --demo)
                demo="--demo"
                shift
                ;;
            --tor)
                tor="true"
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo -e "${RED}Error: Unknown option $1${NC}"
                echo "Use --help for usage information."
                exit 1
                ;;
        esac
    done
    
    # Show banner
    print_banner
    
    # Check dependencies (skip Tor check for demo mode)
    if [[ "$demo" != "--demo" ]]; then
        check_dependencies
    else
        # Only check Python and curl for demo mode
        if ! command -v python3 &> /dev/null; then
            echo -e "${RED}Error: Missing required dependency: python3${NC}"
            exit 1
        fi
        if ! command -v curl &> /dev/null; then
            echo -e "${RED}Error: Missing required dependency: curl${NC}"
            exit 1
        fi
    fi
    
    # Check if Python script exists
    if [[ ! -f "$PYTHON_SCRIPT" ]]; then
        echo -e "${RED}Error: Python script not found: $PYTHON_SCRIPT${NC}"
        exit 1
    fi
    
    # Security: Validate and sanitize interval
    if [[ ! "$interval" =~ ^[0-9]+$ ]] || [[ "$interval" -lt 1 ]] || [[ "$interval" -gt 86400 ]]; then
        echo -e "${RED}Error: Interval must be a positive integer between 1 and 86400 seconds${NC}"
        exit 1
    fi
    
    # Security: Validate config file path
    if [[ "$config" == *".."* ]] || [[ "$config" == *"/"* && "$config" != "$DEFAULT_CONFIG" ]]; then
        # Only allow relative paths or default config for security
        config="$(basename "$config")"
        echo -e "${YELLOW}Security: Using sanitized config filename: $config${NC}"
    fi
    
    # Security: Build command with array to prevent injection
    python_args=("$PYTHON_SCRIPT" "--interval" "$interval" "--config" "$config")
    
    if [[ -n "$verbose" ]]; then
        python_args+=("--verbose")
    fi
    
    if [[ -n "$check_ip" ]]; then
        python_args+=("--check-ip")
    fi
    
    if [[ -n "$demo" ]]; then
        python_args+=("--demo")
    fi
    
    if [[ -n "$tor" ]]; then
        python_args+=("--tor")
    fi
    
    # Show configuration
    if [[ -z "$check_ip" ]]; then
        echo -e "${GREEN}Configuration:${NC}"
        echo "  Interval: ${interval}s"
        echo "  Config: $config"
        echo "  Script: $PYTHON_SCRIPT"
        if [[ -n "$demo" ]]; then
            echo "  Mode: 🎯 Demo (Simulated)"
        else
            echo "  Mode: 👻 Real Phantom Mode (Tor)"
        fi
        echo ""
        echo -e "${YELLOW}Starting IP Phantom...${NC}"
        echo "Press Ctrl+C to stop"
        echo ""
    fi
    
    # Security: Execute Python script with array expansion to prevent injection
    exec python3 "${python_args[@]}"
}

# Run main function
main "$@"