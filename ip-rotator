#!/bin/bash

# IP Rotator - Cybersecurity Tool for Automated IP Address Changing
# Bash wrapper script for the Python IP rotator
# For educational and legitimate security testing purposes only

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PYTHON_SCRIPT="$SCRIPT_DIR/ip_rotator.py"
DEFAULT_INTERVAL=3
DEFAULT_CONFIG="$SCRIPT_DIR/config.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Banner
print_banner() {
    echo -e "${BLUE}"
    echo "=================================================================="
    echo "    ██╗██████╗     ██████╗  ██████╗ ████████╗ █████╗ ████████╗ ██████╗ ██████╗ "
    echo "    ██║██╔══██╗    ██╔══██╗██╔═══██╗╚══██╔══╝██╔══██╗╚══██╔══╝██╔═══██╗██╔══██╗"
    echo "    ██║██████╔╝    ██████╔╝██║   ██║   ██║   ███████║   ██║   ██║   ██║██████╔╝"
    echo "    ██║██╔═══╝     ██╔══██╗██║   ██║   ██║   ██╔══██║   ██║   ██║   ██║██╔══██╗"
    echo "    ██║██║         ██║  ██║╚██████╔╝   ██║   ██║  ██║   ██║   ╚██████╔╝██║  ██║"
    echo "    ╚═╝╚═╝         ╚═╝  ╚═╝ ╚═════╝    ╚═╝   ╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝"
    echo ""
    echo "                    Cybersecurity IP Address Rotation Tool"
    echo "                    For Educational & Security Testing Purposes"
    echo "=================================================================="
    echo -e "${NC}"
}

# Help function
show_help() {
    echo -e "${GREEN}IP Rotator - Automated IP Address Changer${NC}"
    echo ""
    echo -e "${YELLOW}USAGE:${NC}"
    echo "  ./ip-rotator [OPTIONS]"
    echo ""
    echo -e "${YELLOW}OPTIONS:${NC}"
    echo "  -i, --interval SECONDS    Time interval between rotations (default: 3)"
    echo "  -c, --config FILE         Configuration file path (default: config.json)"
    echo "  -v, --verbose             Enable verbose logging"
    echo "  -h, --help               Show this help message"
    echo "  --check-ip               Check current IP address and exit"
    echo "  --setup                  Run initial setup wizard"
    echo "  --stop                   Stop all running VPN connections"
    echo ""
    echo -e "${YELLOW}EXAMPLES:${NC}"
    echo "  ./ip-rotator --interval 10          # Rotate every 10 seconds"
    echo "  ./ip-rotator --config my_vpns.json  # Use custom configuration"
    echo "  ./ip-rotator --check-ip             # Just check current IP"
    echo "  ./ip-rotator --setup                # Run setup wizard"
    echo ""
    echo -e "${YELLOW}REQUIREMENTS:${NC}"
    echo "  - Python 3.6+"
    echo "  - OpenVPN client"
    echo "  - VPN configuration files"
    echo "  - sudo privileges (for VPN connections)"
    echo ""
    echo -e "${RED}LEGAL DISCLAIMER:${NC}"
    echo "This tool is for educational and authorized security testing only."
    echo "Users are responsible for compliance with applicable laws and regulations."
}

# Check dependencies
check_dependencies() {
    local missing_deps=()
    
    # Check Python
    if ! command -v python3 &> /dev/null; then
        missing_deps+=("python3")
    fi
    
    # Check OpenVPN
    if ! command -v openvpn &> /dev/null; then
        missing_deps+=("openvpn")
    fi
    
    # Check curl
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}Error: Missing required dependencies:${NC}"
        for dep in "${missing_deps[@]}"; do
            echo "  - $dep"
        done
        echo ""
        echo "Please install the missing dependencies and try again."
        exit 1
    fi
}

# Setup wizard
setup_wizard() {
    echo -e "${GREEN}IP Rotator Setup Wizard${NC}"
    echo "==============================="
    echo ""
    
    # Check if already configured
    if [ -f "$DEFAULT_CONFIG" ]; then
        echo -e "${YELLOW}Configuration file already exists: $DEFAULT_CONFIG${NC}"
        read -p "Do you want to overwrite it? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Setup cancelled."
            exit 0
        fi
    fi
    
    echo "This wizard will help you configure VPN servers for IP rotation."
    echo ""
    echo -e "${YELLOW}Prerequisites:${NC}"
    echo "1. OpenVPN configuration files (.ovpn) from your VPN provider"
    echo "2. VPN credentials (if required)"
    echo "3. Sudo privileges"
    echo ""
    
    read -p "Do you have OpenVPN configuration files ready? (y/N): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo ""
        echo -e "${YELLOW}Please obtain OpenVPN configuration files first:${NC}"
        echo "1. Sign up with a VPN provider (ExpressVPN, NordVPN, etc.)"
        echo "2. Download OpenVPN configuration files"
        echo "3. Place them in a secure directory"
        echo "4. Re-run this setup"
        exit 0
    fi
    
    # Create default config by running Python script
    echo ""
    echo "Creating default configuration..."
    python3 "$PYTHON_SCRIPT" --check-ip > /dev/null 2>&1
    
    echo -e "${GREEN}✓ Default configuration created: $DEFAULT_CONFIG${NC}"
    echo ""
    echo -e "${YELLOW}Next steps:${NC}"
    echo "1. Edit $DEFAULT_CONFIG"
    echo "2. Update VPN configuration file paths"
    echo "3. Test with: ./ip-rotator --check-ip"
    echo "4. Start rotating: ./ip-rotator --interval 10"
}

# Stop all VPN connections
stop_vpn() {
    echo -e "${YELLOW}Stopping all VPN connections...${NC}"
    
    # Kill OpenVPN processes
    sudo pkill -f openvpn 2>/dev/null
    
    # Reset DNS
    if command -v systemctl &> /dev/null; then
        sudo systemctl restart systemd-resolved 2>/dev/null
    fi
    
    echo -e "${GREEN}✓ VPN connections stopped${NC}"
}

# Check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        echo -e "${RED}Warning: Running as root is not recommended.${NC}"
        echo "This tool will request sudo privileges when needed."
        read -p "Continue anyway? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Main function
main() {
    # Parse arguments
    interval="$DEFAULT_INTERVAL"
    config="$DEFAULT_CONFIG"
    verbose=""
    check_ip=""
    setup=""
    stop=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -i|--interval)
                interval="$2"
                shift 2
                ;;
            -c|--config)
                config="$2"
                shift 2
                ;;
            -v|--verbose)
                verbose="--verbose"
                shift
                ;;
            --check-ip)
                check_ip="--check-ip"
                shift
                ;;
            --setup)
                setup=true
                shift
                ;;
            --stop)
                stop=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo -e "${RED}Error: Unknown option $1${NC}"
                echo "Use --help for usage information."
                exit 1
                ;;
        esac
    done
    
    # Show banner
    print_banner
    
    # Handle special commands
    if [[ "$setup" == true ]]; then
        setup_wizard
        exit 0
    fi
    
    if [[ "$stop" == true ]]; then
        stop_vpn
        exit 0
    fi
    
    # Check dependencies
    check_dependencies
    
    # Check if not running as root
    check_root
    
    # Check if Python script exists
    if [[ ! -f "$PYTHON_SCRIPT" ]]; then
        echo -e "${RED}Error: Python script not found: $PYTHON_SCRIPT${NC}"
        exit 1
    fi
    
    # Validate interval
    if [[ ! "$interval" =~ ^[0-9]+$ ]] || [[ "$interval" -lt 1 ]]; then
        echo -e "${RED}Error: Interval must be a positive integer${NC}"
        exit 1
    fi
    
    # Build Python command
    python_cmd="python3 \"$PYTHON_SCRIPT\" --interval $interval --config \"$config\""
    
    if [[ -n "$verbose" ]]; then
        python_cmd="$python_cmd $verbose"
    fi
    
    if [[ -n "$check_ip" ]]; then
        python_cmd="$python_cmd $check_ip"
    fi
    
    # Show configuration
    if [[ -z "$check_ip" ]]; then
        echo -e "${GREEN}Configuration:${NC}"
        echo "  Interval: ${interval}s"
        echo "  Config: $config"
        echo "  Script: $PYTHON_SCRIPT"
        echo ""
        echo -e "${YELLOW}Starting IP rotation...${NC}"
        echo "Press Ctrl+C to stop"
        echo ""
    fi
    
    # Execute Python script
    eval "$python_cmd"
}

# Handle Ctrl+C
trap 'echo -e "\n${YELLOW}Shutting down...${NC}"; exit 130' INT

# Run main function
main "$@"